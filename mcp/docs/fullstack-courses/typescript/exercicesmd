interface Employee {
  id: number;
  name: string;
  department: {
    id: number;
    name: string;
  };
}

interface Aircraft {
  id: number;
  name: string;
}

async function fetchData(id: string): Promise<any> {
  return new Promise((resolve) => {
    return resolve("something");
  });
}

fetchData("123")
  .then((result: string) => {
    console.log("Result:", result);
  })
  .catch((error: any) => {
    console.error("Error:", error);
  });

const aircraft: Aircraft[] = [
  { id: 1, name: "Aircraft1" },
  { id: 10, name: "Aircraft2" },
  { id: 40, name: "Aircraft3" },
  { id: 20, name: "Aircraft4" },
];

aircraft.sort((a, b) => a.id - b.id);
console.log("Aircraft ascending:", aircraft);

aircraft.sort((a, b) => b.id - a.id);
console.log("Aircraft descending:", aircraft);

const datasource = {
  find: <T>(query: object): T[] => {
    const employees: Employee[] = [
      {
        id: 1,
        name: "Alice",
        department: { id: 100, name: "HR" },
      },
      {
        id: 2,
        name: "Bob",
        department: { id: 200, name: "IT" },
      },
    ];
    return employees as T[];
  },
};

const employees = datasource.find<Employee>({
  select: {
    id: true,
    name: true,
    department: {
      id: true,
      name: true,
    },
  },
});

console.log("Employees:", employees);
